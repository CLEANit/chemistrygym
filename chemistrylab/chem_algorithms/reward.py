'''
Module to define a universal reward function.

:title: reward.py

:author: Chris Beeler and Mitchell Shahen

:history: 2020-07-22

The reward generated by completing a process in any of the reaction, extraction, or distillation
bench relates to the distribution and purity of the desired material inside the vessel, or one
of the vessels, used in completing the process.

Reaction bench only uses one vessel, so the reward is determined by the amount of the desired
material in relation to the total amount of material.

Extraction bench

Distillation bench
'''

import copy
import math
import numpy as np
import sys

sys.path.append("../../")
from chemistrylab.chem_algorithms import material

# ---------- # REACTION BENCH # ---------- #

class ReactionReward:
    '''
    '''

    def __init__(
        self,
        vessel=None,
        desired_material=""
    ):
        '''
        '''

        self.vessel, self.desired_material = self._check_parameters(
            vessel=vessel,
            desired_material=desired_material
        )

    def _check_parameters(self, vessel, desired_material):
        '''
        '''

        # ensure the desired material is represented by a string
        if not isinstance(self.desired_material, str):
            print("Invalid Parameter Type: `desired_material` must be a string.")
            desired_material = ""

        # acquire all the materials from the inputted vessel
        all_materials = [material for material, __ in vessel._material_dict.items()]

        # check that the input vessel has at least one material
        if not all_materials:
            print("Vessel has no materials.")

        # check that the inputted vessel has the desired material
        if any([
                desired_material,
                desired_material not in all_materials
        ]):
            print("Desired material not found in input vessel.")

        return vessel, desired_material

    def calc_reward(self):
        '''
        '''

        # create variables to contain the material amounts
        desired_material_amount = 0
        total_material_amount = 0

        # unpack the vessel's material dictionary
        for material, value_list in self.vessel._material_dict.items():
            # unpack the value list
            material_amount = value_list[1]

            # add the amount of material to the list of total material
            total_material_amount += material_amount

            # check if the current material is the desired material
            if material == self.desired_material:
                desired_material_amount = material_amount

        # calculate the reward
        reward = desired_material_amount/total_material_amount

        return reward

# ---------- # EXTRACTION BENCH # ---------- #

class ExtractionReward:
    '''
    '''

    def __init__(
            self,
            vessels=[],
            desired_material="",
            initial_target_amount=0
    ):
        '''
        '''

        self.vessels, self.desired_material, self.desired_vessels = self._check_parameters(
            vessels=vessels,
            desired_material=desired_material
        )

        self.initial_target_amount = initial_target_amount

    def _check_parameters(self, vessels, desired_material):
        '''
        '''

        # ensure the desired material is represented by a string
        if not isinstance(self.desired_material, str):
            print("Invalid Parameter Type: `desired_material` must be a string.")
            desired_material = ""

        # create a list to track which vessels contain the desired material
        is_present = [True for __ in vessels]

        # check that the desired material is in at least one of the inputted vessels
        for i, vessel in enumerate(vessels):
            # get the name of the vessel
            label = vessel.label

            # acquire all the materials from the inputted vessel
            all_materials = [material for material, __ in vessel._material_dict.items()]

            # check that the input vessel has at least one material
            if not all_materials:
                print("{} has no materials.".format(label))

            # check that the inputted vessel has the desired material;
            # if it does not change the ith element in `is_present` to False
            if any([
                    desired_material,
                    desired_material not in all_materials
            ]):
                is_present[i] = False
                print("Desired material not found in {}.".format(label))

        # if no vessel contains the desired material, all elements in `is_present` will be False
        if not any(is_present):
            print("No desired material found in any inputted vessels.")

        # create a new list of vessels that contain the desired material
        desired_vessels = [vessels[i] for i, desired in enumerate(is_present) if desired]

        return vessels, desired_material, desired_vessels

    @staticmethod
    def calc_vessel_purity(vessel, desired_material, initial_target_amount):
        '''
        Method to calculate the full reward once the final action has taken place.

        Parameters
        ---------------
        `vessel` : `vessel.Vessel`
            A vessel object that contains all of the extracted materials and solutes.

        Returns
        ---------------
        `reward` : `float`
            The amount of the target material that has been generated by the most recent action.

        Raises
        ---------------
        `AssertionError`:
            Raised if no target material is found in the extraction vessel.
        '''

        material_amount = vessel.get_material_amount(desired_material)

        if abs(material_amount - 0) < 1e-6:
            reward = -100
        else:
            try:
                assert abs(initial_target_amount - 0.0) > 1e-6

                reward = (material_amount / initial_target_amount) * 100

                print(
                    "done_reward ({}): {}, in_vessel: {}, initial: {}".format(
                        vessel.label,
                        "{} %".format(round(reward, 2)),
                        "{:e}".format(material_amount),
                        "{:e}".format(initial_target_amount)
                    )
                )

            except AssertionError:
                reward = 0
                print("Oops! Division by zero. There's no target material in Extraction Vessel.")

        return reward

    def calc_reward(self):
        '''
        '''

        total_reward = 0

        for vessel in self.desired_vessels:
            total_reward += self.calc_vessel_purity(
                vessel=vessel,
                desired_material=self.desired_material,
                initial_target_amount=self.initial_target_amount
            )

        final_reward = total_reward / len(self.desired_vessels)

        return final_reward

# ---------- # DISTILLATION BENCH # ---------- #

class DistillationReward:
    '''
    '''

    def __init__(
            self,
            vessels=[],
            desired_material=""
    ):
        '''
        '''

        self.vessels, self.desired_material, self.desired_vessels = self._check_parameters(
            vessels=vessels,
            desired_material=desired_material
        )

    def _check_parameters(self, vessels, desired_material):
        '''
        '''

        # ensure the desired material is represented by a string
        if not isinstance(self.desired_material, str):
            print("Invalid Parameter Type: `desired_material` must be a string.")
            desired_material = ""

        # create a list to track which vessels contain the desired material
        is_present = [True for __ in vessels]

        # check that the desired material is in at least one of the inputted vessels
        for i, vessel in enumerate(vessels):
            # get the name of the vessel
            label = vessel.label

            # acquire all the materials from the inputted vessel
            all_materials = [material for material, __ in vessel._material_dict.items()]

            # check that the input vessel has at least one material
            if not all_materials:
                print("{} has no materials.".format(label))

            # check that the inputted vessel has the desired material;
            # if it does not change the ith element in `is_present` to False
            if any([
                    desired_material,
                    desired_material not in all_materials
            ]):
                is_present[i] = False
                print("Desired material not found in {}.".format(label))

        # if no vessel contains the desired material, all elements in `is_present` will be False
        if not any(is_present):
            print("No desired material found in any inputted vessels.")

        # create a new list of vessels that contain the desired material
        desired_vessels = [vessels[i] for i, desired in enumerate(is_present) if desired]

        return vessels, desired_material, desired_vessels

    @staticmethod
    def calc_vessel_purity(vessel, desired_material):
        '''
        Method to calculate the full reward once the final action has taken place.

        Parameters
        ---------------
        `beaker` : `vessel.Vessel`
            A vessel object that contains all of the extracted materials and solutes.

        Returns
        ---------------
        `reward` : `float`
            The amount of the target material that has been generated by the most recent action.

        Raises
        ---------------
        None
        '''

        # get the name of the vessel object containing the target material
        label = vessel.label

        # extract the material dictionary from the vessel object
        materials = vessel._material_dict

        # obtain the names and value lists from the material dictionary
        material_names = list(materials.keys())
        values = list(materials.values())

        # get the index and then amount of the target material in the material dictionary
        target_material_index = material_names.index(desired_material)
        target_material_amount = values[target_material_index][1]

        # sum the amounts of all materials in the material dictionary
        total_material_amount = 0
        for value_list in values:
            material_amount = value_list[1]
            total_material_amount += material_amount

        # calculate the reward as the purity of the target material in the vessel
        reward = 100 * target_material_amount / total_material_amount

        # print the results to the terminal
        print("Done Reward in {}:".format(label))
        print("----- Target Material Amount = {} -----".format(target_material_amount))
        print("----- Total Material Amount = {} -----".format(total_material_amount))
        print("----- Reward = {} -----".format(reward))

        return reward

    def calc_reward(self):
        '''
        '''

        total_reward = 0

        for vessel in self.desired_vessels:
            total_reward += self.calc_vessel_purity(
                vessel=vessel,
                desired_material=self.desired_material
            )

        final_reward = total_reward / len(self.desired_vessels)

        return final_reward